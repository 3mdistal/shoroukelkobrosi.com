---
import MainLayout from "@/layouts/main-layout.astro";
import { getCollection } from "astro:content";

const days = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
] as const;

type Day = (typeof days)[number];
type Meal = { main: string; sides: string[] };
type MealPlan = Record<Day, { breakfast: Meal; dinner: Meal }>;
type WeeklyItems = { snacks: string[]; desserts: string[]; fruits: string[] };

const recipesCollection = await getCollection("recipes");
const recipes = recipesCollection[0]?.data?.data ?? [];

const breakfastRecipes = recipes.filter(
  (recipe) => recipe.type === "breakfast"
);
const dinnerRecipes = recipes.filter((recipe) => recipe.type === "dinner");
const snacks = recipes.filter((recipe) => recipe.type === "snack");
const sides = recipes.filter((recipe) => recipe.type === "side");
const desserts = recipes.filter((recipe) => recipe.type === "dessert");
const fruits = recipes.filter((recipe) => recipe.type === "fruit");

const initialMealPlan: MealPlan = days.reduce((accumulator, day) => {
  accumulator[day] = {
    breakfast: { main: "", sides: [] },
    dinner: { main: "", sides: [] },
  };
  return accumulator;
}, {} as MealPlan);

const initialWeeklyItems: WeeklyItems = {
  snacks: [],
  desserts: [],
  fruits: [],
};
---

<MainLayout>
  <h1>Meal Planner</h1>

  <div class="meal-planner-container">
    <div class="form-container">
      <form id="mealPlanForm">
        {
          days.map((day) => (
            <fieldset>
              <legend>{day}</legend>
              <div>
                <label for={`${day}-breakfast-main`}>Breakfast:</label>
                <select
                  id={`${day}-breakfast-main`}
                  name={`${day}-breakfast-main`}
                >
                  <option value="">Select a breakfast</option>
                  {breakfastRecipes.map((recipe) => (
                    <option value={recipe.name}>{recipe.name}</option>
                  ))}
                </select>
              </div>
              <div>
                <label for={`${day}-breakfast-sides`}>Breakfast Sides:</label>
                <select
                  id={`${day}-breakfast-sides`}
                  name={`${day}-breakfast-sides`}
                  multiple
                >
                  {sides.map((recipe) => (
                    <option value={recipe.name}>{recipe.name}</option>
                  ))}
                </select>
              </div>
              <div>
                <label for={`${day}-dinner-main`}>Dinner:</label>
                <select id={`${day}-dinner-main`} name={`${day}-dinner-main`}>
                  <option value="">Select a dinner</option>
                  {dinnerRecipes.map((recipe) => (
                    <option value={recipe.name}>{recipe.name}</option>
                  ))}
                </select>
              </div>
              <div>
                <label for={`${day}-dinner-sides`}>Dinner Sides:</label>
                <select
                  id={`${day}-dinner-sides`}
                  name={`${day}-dinner-sides`}
                  multiple
                >
                  {sides.map((recipe) => (
                    <option value={recipe.name}>{recipe.name}</option>
                  ))}
                </select>
              </div>
            </fieldset>
          ))
        }

        <fieldset>
          <legend>Weekly Items</legend>
          <div>
            <label for="snacks">Snacks:</label>
            <select id="snacks" name="snacks" multiple>
              {
                snacks.map((recipe) => (
                  <option value={recipe.name}>{recipe.name}</option>
                ))
              }
            </select>
          </div>
          <div>
            <label for="desserts">Desserts:</label>
            <select id="desserts" name="desserts" multiple>
              {
                desserts.map((recipe) => (
                  <option value={recipe.name}>{recipe.name}</option>
                ))
              }
            </select>
          </div>
          <div>
            <label for="fruits">Fruits:</label>
            <select id="fruits" name="fruits" multiple>
              {
                fruits.map((recipe) => (
                  <option value={recipe.name}>{recipe.name}</option>
                ))
              }
            </select>
          </div>
        </fieldset>

        <button type="submit">Save Meal Plan</button>
      </form>
    </div>

    <div class="plan-display-container">
      <h2>This Week's Meal Plan</h2>
      <div id="mealPlanDisplay">
        {
          days.map((day) => (
            <div class="day-plan">
              <h3>{day}</h3>
              <p>
                Breakfast:{" "}
                <span class="meal breakfast-main">
                  {initialMealPlan[day].breakfast.main || "Not planned yet"}
                </span>
              </p>
              <p>
                Breakfast Sides:{" "}
                <span class="meal breakfast-sides">
                  {initialMealPlan[day].breakfast.sides.length > 0
                    ? initialMealPlan[day].breakfast.sides.join(", ")
                    : "Not planned yet"}
                </span>
              </p>
              <p>
                Dinner:{" "}
                <span class="meal dinner-main">
                  {initialMealPlan[day].dinner.main || "Not planned yet"}
                </span>
              </p>
              <p>
                Dinner Sides:{" "}
                <span class="meal dinner-sides">
                  {initialMealPlan[day].dinner.sides.length > 0
                    ? initialMealPlan[day].dinner.sides.join(", ")
                    : "Not planned yet"}
                </span>
              </p>
            </div>
          ))
        }
        <div class="weekly-items">
          <h3>Weekly Items</h3>
          <p>
            Snacks: <span class="weekly snacks">
              {
                initialWeeklyItems.snacks.length > 0
                  ? initialWeeklyItems.snacks.join(", ")
                  : "Not planned yet"
              }
            </span>
          </p>
          <p>
            Desserts: <span class="weekly desserts">
              {
                initialWeeklyItems.desserts.length > 0
                  ? initialWeeklyItems.desserts.join(", ")
                  : "Not planned yet"
              }
            </span>
          </p>
          <p>
            Fruits: <span class="weekly fruits">
              {
                initialWeeklyItems.fruits.length > 0
                  ? initialWeeklyItems.fruits.join(", ")
                  : "Not planned yet"
              }
            </span>
          </p>
        </div>
      </div>
    </div>
  </div>

  <style>
    .meal-planner-container {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    @media (min-width: 768px) {
      .meal-planner-container {
        flex-direction: row;
      }

      .form-container {
        padding-right: 2rem;
        width: 50vw;
        height: 100vh;
        overflow-y: auto;
      }

      .plan-display-container {
        position: fixed;
        top: 0;
        right: 0;
        box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
        padding: 2rem;
        width: 50vw;
        height: 100vh;
        overflow-y: auto;
      }
    }

    /* Remove the body padding */
    body {
      margin: 0;
      padding: 0;
    }

    /* Add some general styles for better readability */
    h1,
    h2 {
      margin-top: 0;
    }

    fieldset {
      margin-bottom: 1rem;
    }

    /* Update the styling for all multiple select elements */
    select[multiple] {
      width: 100%;
      height: 5em;
    }
  </style>

  <script>
    const form = document.getElementById("mealPlanForm") as HTMLFormElement;
    const mealPlanDisplay = document.getElementById(
      "mealPlanDisplay"
    ) as HTMLDivElement;

    type Meal = { main: string; sides: string[] };
    type MealPlan = Record<string, { breakfast: Meal; dinner: Meal }>;
    type WeeklyItems = {
      snacks: string[];
      desserts: string[];
      fruits: string[];
    };

    // Initialize mealPlan and weeklyItems
    const mealPlan: MealPlan = {};
    const weeklyItems: WeeklyItems = {
      snacks: [],
      desserts: [],
      fruits: [],
    };

    // Function to update meal plan when a select element changes
    function handleSelectChange(event: Event) {
      const select = event.target as HTMLSelectElement;
      const [day, mealType, itemType] = select.id.split("-");

      if (day && mealType && itemType) {
        if (!mealPlan[day]) {
          mealPlan[day] = {
            breakfast: { main: "", sides: [] },
            dinner: { main: "", sides: [] },
          };
        }
        if (itemType === "sides") {
          mealPlan[day][mealType as "breakfast" | "dinner"].sides = Array.from(
            select.selectedOptions
          ).map((option) => option.value);
        } else {
          mealPlan[day][mealType as "breakfast" | "dinner"].main = select.value;
        }
      } else {
        const weeklyItemKey = select.id as keyof WeeklyItems;
        weeklyItems[weeklyItemKey] = Array.from(select.selectedOptions).map(
          (option) => option.value
        );
      }

      updateMealPlanDisplay(mealPlan, weeklyItems);
    }

    // Add event listeners to all select elements
    const selects = form.querySelectorAll("select");
    selects.forEach((select) => {
      select.addEventListener("change", handleSelectChange);
    });

    function updateMealPlanDisplay(
      mealPlan: MealPlan,
      weeklyItems: WeeklyItems
    ) {
      const days = [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday",
      ];

      let html = "";
      for (const day of days) {
        const meals = mealPlan[day] || {
          breakfast: { main: "", sides: [] },
          dinner: { main: "", sides: [] },
        };
        html += `
          <div class="day-plan">
            <h3>${day}</h3>
            <p>Breakfast: <span class="meal breakfast-main">${meals.breakfast.main || "Not planned yet"}</span></p>
            <p>Breakfast Sides: <span class="meal breakfast-sides">${meals.breakfast.sides.length > 0 ? meals.breakfast.sides.join(", ") : "Not planned yet"}</span></p>
            <p>Dinner: <span class="meal dinner-main">${meals.dinner.main || "Not planned yet"}</span></p>
            <p>Dinner Sides: <span class="meal dinner-sides">${meals.dinner.sides.length > 0 ? meals.dinner.sides.join(", ") : "Not planned yet"}</span></p>
          </div>
        `;
      }
      html += `
        <div class="weekly-items">
          <h3>Weekly Items</h3>
          <p>Snacks: <span class="weekly snacks">${weeklyItems.snacks.length > 0 ? weeklyItems.snacks.join(", ") : "Not planned yet"}</span></p>
          <p>Desserts: <span class="weekly desserts">${weeklyItems.desserts.length > 0 ? weeklyItems.desserts.join(", ") : "Not planned yet"}</span></p>
          <p>Fruits: <span class="weekly fruits">${weeklyItems.fruits.length > 0 ? weeklyItems.fruits.join(", ") : "Not planned yet"}</span></p>
        </div>
      `;
      mealPlanDisplay.innerHTML = html;
    }
  </script>
</MainLayout>
