---
import MainLayout from "@/layouts/main-layout.astro";
import { getCollection } from "astro:content";

const days = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
] as const;

type Day = (typeof days)[number];
type Meal = { breakfast: string; dinner: string };
type MealPlan = Record<Day, Meal>;
type WeeklyItems = { snacks: string; desserts: string; fruits: string };

type Recipe = {
  name: string;
  type: "breakfast" | "dinner" | "snack" | "dessert" | "fruit";
};

const recipesEntry = await getCollection("recipes");
const recipes: Recipe[] = recipesEntry[0]?.data?.data ?? [];

if (!recipes.length) {
  console.error("No recipes found or invalid data structure");
}

const breakfastRecipes = recipes.filter(
  (recipe) => recipe.type === "breakfast"
);
const dinnerRecipes = recipes.filter((recipe) => recipe.type === "dinner");
const snacks = recipes.filter((recipe) => recipe.type === "snack");
const desserts = recipes.filter((recipe) => recipe.type === "dessert");
const fruits = recipes.filter((recipe) => recipe.type === "fruit");

const initialMealPlan: MealPlan = days.reduce((acc, day) => {
  acc[day] = { breakfast: "", dinner: "" };
  return acc;
}, {} as MealPlan);

const initialWeeklyItems: WeeklyItems = {
  snacks: "",
  desserts: "",
  fruits: "",
};
---

<MainLayout>
  <h1>Meal Planner</h1>

  <div class="meal-planner-container">
    <div class="form-container">
      <form id="mealPlanForm">
        {
          days.map((day) => (
            <fieldset>
              <legend>{day}</legend>
              <div>
                <label for={`${day}-breakfast`}>Breakfast:</label>
                <select id={`${day}-breakfast`} name={`${day}-breakfast`}>
                  <option value="">Select a breakfast</option>
                  {breakfastRecipes.map((recipe) => (
                    <option value={recipe.name}>{recipe.name}</option>
                  ))}
                </select>
              </div>
              <div>
                <label for={`${day}-dinner`}>Dinner:</label>
                <select id={`${day}-dinner`} name={`${day}-dinner`}>
                  <option value="">Select a dinner</option>
                  {dinnerRecipes.map((recipe) => (
                    <option value={recipe.name}>{recipe.name}</option>
                  ))}
                </select>
              </div>
            </fieldset>
          ))
        }

        <fieldset>
          <legend>Weekly Items</legend>
          <div>
            <label for="snacks">Snacks:</label>
            <select id="snacks" name="snacks">
              <option value="">Select a snack</option>
              {
                snacks.map((recipe) => (
                  <option value={recipe.name}>{recipe.name}</option>
                ))
              }
            </select>
          </div>
          <div>
            <label for="desserts">Desserts:</label>
            <select id="desserts" name="desserts">
              <option value="">Select a dessert</option>
              {
                desserts.map((recipe) => (
                  <option value={recipe.name}>{recipe.name}</option>
                ))
              }
            </select>
          </div>
          <div>
            <label for="fruits">Fruits:</label>
            <select id="fruits" name="fruits">
              <option value="">Select a fruit</option>
              {
                fruits.map((recipe) => (
                  <option value={recipe.name}>{recipe.name}</option>
                ))
              }
            </select>
          </div>
        </fieldset>

        <button type="submit">Save Meal Plan</button>
      </form>
    </div>

    <div class="plan-display-container">
      <h2>This Week's Meal Plan</h2>
      <div id="mealPlanDisplay">
        {
          days.map((day) => (
            <div class="day-plan">
              <h3>{day}</h3>
              <p>
                Breakfast:{" "}
                <span class="meal breakfast">
                  {initialMealPlan[day].breakfast || "Not planned yet"}
                </span>
              </p>
              <p>
                Dinner:{" "}
                <span class="meal dinner">
                  {initialMealPlan[day].dinner || "Not planned yet"}
                </span>
              </p>
            </div>
          ))
        }
        <div class="weekly-items">
          <h3>Weekly Items</h3>
          <p>
            Snacks: <span class="weekly snacks">
              {initialWeeklyItems.snacks || "Not planned yet"}
            </span>
          </p>
          <p>
            Desserts: <span class="weekly desserts">
              {initialWeeklyItems.desserts || "Not planned yet"}
            </span>
          </p>
          <p>
            Fruits: <span class="weekly fruits">
              {initialWeeklyItems.fruits || "Not planned yet"}
            </span>
          </p>
        </div>
      </div>
    </div>
  </div>

  <style>
    .meal-planner-container {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    @media (min-width: 768px) {
      .meal-planner-container {
        flex-direction: row;
      }

      .form-container,
      .plan-display-container {
        flex: 1;
      }
    }
  </style>

  <script>
    const form = document.getElementById("mealPlanForm") as HTMLFormElement;
    const mealPlanDisplay = document.getElementById(
      "mealPlanDisplay"
    ) as HTMLDivElement;

    type MealPlan = Record<string, { breakfast: string; dinner: string }>;
    type WeeklyItems = Record<string, string>;

    // Initialize mealPlan and weeklyItems
    const mealPlan: MealPlan = {};
    const weeklyItems: WeeklyItems = {};

    // Function to update meal plan when a select element changes
    function handleSelectChange(event: Event) {
      const select = event.target as HTMLSelectElement;
      const [day, meal] = select.id.split("-");

      if (day && meal) {
        if (!mealPlan[day]) mealPlan[day] = { breakfast: "", dinner: "" };
        mealPlan[day][meal as "breakfast" | "dinner"] = select.value;
      } else {
        weeklyItems[select.id] = select.value;
      }

      updateMealPlanDisplay(mealPlan, weeklyItems);
    }

    // Add event listeners to all select elements
    const selects = form.querySelectorAll("select");
    selects.forEach((select) => {
      select.addEventListener("change", handleSelectChange);
    });

    // Remove the form submit event listener
    // form.addEventListener("submit", (e) => { ... });

    function updateMealPlanDisplay(
      mealPlan: MealPlan,
      weeklyItems: WeeklyItems
    ) {
      let html = "";
      for (const [day, meals] of Object.entries(mealPlan)) {
        html += `
          <div class="day-plan">
            <h3>${day}</h3>
            <p>Breakfast: <span class="meal breakfast">${meals.breakfast || "Not planned yet"}</span></p>
            <p>Dinner: <span class="meal dinner">${meals.dinner || "Not planned yet"}</span></p>
          </div>
        `;
      }
      html += `
        <div class="weekly-items">
          <h3>Weekly Items</h3>
          <p>Snacks: <span class="weekly snacks">${weeklyItems.snacks || "Not planned yet"}</span></p>
          <p>Desserts: <span class="weekly desserts">${weeklyItems.desserts || "Not planned yet"}</span></p>
          <p>Fruits: <span class="weekly fruits">${weeklyItems.fruits || "Not planned yet"}</span></p>
        </div>
      `;
      mealPlanDisplay.innerHTML = html;
    }
  </script>
</MainLayout>
