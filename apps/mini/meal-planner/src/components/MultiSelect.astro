---
interface Props {
  id: string;
  label: string;
  options: { name: string }[];
  placeholder?: string;
}

const { id, label, options, placeholder = "Type to search options" } = Astro.props;
---

<div class="multi-select-container">
  <label for={id}>{label}</label>
  <div class="multi-select" id={id}>
    <input type="text" placeholder={placeholder} />
    <div class="selected-options"></div>
    <div class="options">
      {options.map((option) => (
        <label>
          <input type="checkbox" value={option.name} />
          {option.name}
        </label>
      ))}
    </div>
  </div>
</div>

<style>
  .multi-select-container {
    margin-bottom: 1rem;
  }

  .multi-select {
    position: relative;
    width: 100%;
  }

  .multi-select input[type="text"] {
    width: 100%;
    padding: 5px;
  }

  .multi-select .options {
    display: none;
    position: absolute;
    background-color: #fff;
    border: 1px solid #ccc;
    max-height: 200px;
    overflow-y: auto;
    width: 100%;
    z-index: 1;
  }

  .multi-select .options label {
    display: block;
    padding: 5px;
  }

  .multi-select .options label:hover {
    background-color: #f0f0f0;
  }

  .selected-options {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    margin-top: 5px;
  }

  .selected-option {
    background-color: #e0e0e0;
    border-radius: 3px;
    padding: 2px 5px;
    display: flex;
    align-items: center;
  }

  .remove-option {
    margin-left: 5px;
    cursor: pointer;
  }
</style>

<script>
  function setupMultiSelect(multiSelect: HTMLElement) {
    const input = multiSelect.querySelector('input[type="text"]') as HTMLInputElement;
    const options = multiSelect.querySelector('.options') as HTMLDivElement;
    const checkboxes = options.querySelectorAll('input[type="checkbox"]');
    const selectedOptionsContainer = multiSelect.querySelector('.selected-options') as HTMLDivElement;

    input.addEventListener('focus', () => {
      options.style.display = 'block';
    });

    document.addEventListener('click', (event) => {
      if (!multiSelect.contains(event.target as Node)) {
        options.style.display = 'none';
      }
    });

    input.addEventListener('input', () => {
      const filter = input.value.toLowerCase();
      checkboxes.forEach((checkbox: HTMLInputElement) => {
        const label = checkbox.parentElement as HTMLLabelElement;
        if (label.textContent?.toLowerCase().includes(filter)) {
          label.style.display = 'block';
        } else {
          label.style.display = 'none';
        }
      });
    });

    checkboxes.forEach((checkbox: HTMLInputElement) => {
      checkbox.addEventListener('change', () => {
        updateSelectedOptions(multiSelect);
      });
    });
  }

  function updateSelectedOptions(multiSelect: HTMLElement) {
    const selectedOptionsContainer = multiSelect.querySelector('.selected-options') as HTMLDivElement;
    const checkboxes = multiSelect.querySelectorAll('input[type="checkbox"]:checked');
    
    selectedOptionsContainer.innerHTML = '';
    checkboxes.forEach((checkbox: HTMLInputElement) => {
      const optionElement = document.createElement('span');
      optionElement.className = 'selected-option';
      optionElement.textContent = checkbox.value;
      
      const removeButton = document.createElement('span');
      removeButton.className = 'remove-option';
      removeButton.textContent = 'Ã—';
      removeButton.onclick = () => {
        checkbox.checked = false;
        updateSelectedOptions(multiSelect);
      };
      
      optionElement.appendChild(removeButton);
      selectedOptionsContainer.appendChild(optionElement);
    });
  }

  // Set up multi-select for all relevant elements
  document.querySelectorAll('.multi-select').forEach(setupMultiSelect);
</script>